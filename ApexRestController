public class ApexRestController {
    public static List<String> gitBranch {get;set;}
    public static String JsonResponse {get;set;}
    public static Map<String, List<String>> repoBranch {get;set;} // this is use for related branch with Repository
    public static List<String> branchNameResToRepo {get;set;}
    public static String repoName{get;set;}
    public static String branchName{get;set;}
    public static List<String> reposListname;
    public static List<List<String>> listofBranch;
    public static Map<String,String> repoBranchVsShaId{get;set;}
    public static List<String> commitFileNameResToRepo {get;set;}
    public static list<WrapperBranch> listbranch{get;set;}
    
      public ApexRestController()
    {
        //gitDetailsRepoName = new List<String>();
        //getGitDetailsRepoName();
        
    }
    
    public static HTTPResponse getAuthentication()
    {
        HttpRequest req = new HttpRequest();
        String endpoint = 'https://api.github.com/search/repositories?q=user:dipalisharma1996';
        req.setEndpoint(endpoint);
        req.setMethod('GET');
        String username = 'dipalisharma1996';
        String Gitbytoken= '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';
        Blob headerValue = Blob.valueOf(username + ':'+Gitbytoken);
        String authorizationHeader = 'Basic' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization',authorizationHeader);
        req.setHeader('Content-Type','application/json');
        Http http = new Http();
        HTTPResponse res = http.send(req);
        return res;
    }
    
    public static List<WrapperIt> getReposList(){
        HTTPResponse res = getAuthentication();
        JsonResponse =res.getBody();
        List<WrapperIt> listReturn = new List<WrapperIt>();
        JsonParserWrapper json=JsonParserWrapper.parse(JsonResponse);
        Integer i = 0;
        reposListname=new List<String>();
        listofBranch=new List<List<String>>();
        for(JsonParserWrapper.cls_items items:json.items)
        {
            
            if(items.name!=null){
                WrapperIt wr = new WrapperIt();
                wr.repo = items.name;
                wr.rendered = true;
                listReturn.add(wr);
                reposListname.add(items.name);
                getgitBranch(items.name) ;
            }
            i++;
        }
        //System.debug('reposListname>>>>'+reposListname);
        /*Set<String> allKeys= repoBranch.keyset();
for(integer j=0; j<reposListname.size(); j++){
for(String str:allKeys){
if(reposListname[j] == str){

branchNameResToRepo = repoBranch.get(str);
listofBranch.add(branchNameResToRepo);
}
}
}*/
        //System.debug('listofBranch>>>>'+listofBranch);
        System.debug('listReturn1>>>'+listReturn);
        return listReturn;
    }
    
    public static Map<String,Object> getgitBranch(String rname){
        HttpRequest req = new HttpRequest();
        String endpoint = 'https://api.github.com/repos/dipalisharma1996/'+rname+'/branches';
        //system.debug('endpoint' + endpoint);
        req.setEndpoint(endpoint);
        req.setMethod('GET');
        String username = 'dipalisharma1996';
        String Gitbytoken= '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';
        Blob headerValue = Blob.valueOf(username + ':'+Gitbytoken);
        String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization',authorizationHeader);
        req.setHeader('Content-Type','application/json');
        Http http = new Http();
        HTTPResponse res = http.send(req);
        List<Object> branchName = (List<Object>) JSON.deserializeUntyped(res.getBody());
        gitBranch = new List<String>();
        repoBranchVsShaId =new Map<String, String>();
        if(repoBranch==null)
        {
            repoBranch= new Map<String,List<String>> ();
        }
        List<Map<String,String>> mapxyz= new List<Map<String,String>> ();
        for(Object oitem: branchName){
            Map<String,Object> data = (Map<String,Object>)oitem;
            //Map<String,Object> data2 = (Map<String,Object>)data;
            Map<String,Object> abc = (Map<String,Object>)data.get('commit');
            gitBranch.add((String)data.get('name'));
            //gitCommitSha.add((String)abc.get('sha'));
            String varT=string.valueOf(abc.get('sha'));
            repoBranchVsShaId.put((String)data.get('name'),varT);
            System.debug('repoBranchVsShaId value>>>'+repoBranchVsShaId);
            repoBranch.put(rname,gitBranch);
            //System.debug('shaId>>>'+shaId);
            
        }
        //System.debug('repoBranchVsShaId>>>'+repoBranchVsShaId);
        
        //System.debug('repoBranch>>'+repoBranch);
        return repoBranch;
    }
    
    public static List<String> gitCommit(String rname,String sha){
        String shaID1='91b107737d4261a7200a4387869ccc06e48f5169';
        HttpRequest req = new HttpRequest();
        String endpoint = 'https://api.github.com/repos/dipalisharma1996/'+rname+'/commits/'+shaID1;
        system.debug('endpoint' + endpoint);
        req.setEndpoint(endpoint);
        req.setMethod('GET');
        String username = 'dipalisharma1996';
        String Gitbytoken= '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';
        Blob headerValue = Blob.valueOf(username + ':'+Gitbytoken);
        String authorizationHeader = 'Basic ' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization',authorizationHeader);
        req.setHeader('Content-Type','application/json');
        Http http = new Http();
        HTTPResponse res = http.send(req);
        System.debug('res.getBody()>>>'+res.getBody());
        List<String> commitList=new List<String>();
        Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
        List<Object> items=new List<Object>();
        items = (List<Object>) results.get('files');
        List<Object> bbb = new List<Object>();
        for (Object item: items) {
            Map<String,Object> ttt = (Map<String,Object>)item;
            
            commitList.add(String.valueOf(ttt.get('filename')));
        }
        System.debug('commitList'+ commitList);
        return commitList;
        
    }
    
    public static void showBranchResToRepoo()
    {
        //String shaId='91b107737d4261a7200a4387869ccc06e48f5169';
        //System.debug('repoName==' +repoName);
        Set<String> allKeys= repoBranch.keyset();
        for(String str:allKeys){
            if(repoName == str){
                
                branchNameResToRepo = repoBranch.get(str);
                 System.debug('branchNameResToRepo values==' +branchNameResToRepo);
            }
        }
        listbranch=new list<WrapperBranch>();
        for(String branchName: branchNameResToRepo){
            //System.debug('branchName values==' +branchName);
            WrapperBranch wb=new WrapperBranch();
            wb.branch= branchName;
            listbranch.add(wb);
        }
        //System.debug('listbranch values==' +listbranch);
        showBranchCommitFiles();
        
    }
    public static void showBranchCommitFiles()
    {
        System.debug('branchName444>>>'+branchName);
        String repoBranchName='Commit-Branch';
        String repoName1='Repository-5';
        String repoBranchShaID='';
        //String shaId='91b107737d4261a7200a4387869ccc06e48f5169';
        //System.debug('repoName==' +repoName);
        Set<String> allKeys= repoBranchVsShaId.keyset();
        for(String str:allKeys){
            if(repoBranchName == str){
                
                repoBranchShaID = repoBranchVsShaId.get(str);
                //System.debug('repoName==' +repoName);
                //System.debug('repoBranchShaID values==' +repoBranchShaID);
            }
        }
        
        commitFileNameResToRepo=gitCommit(repoName1,repoBranchShaID);
    }
    
    
    public class WrapperIt{
        public String repo{get;set;}
        public Boolean rendered{get;set;}
    }
    public class WrapperBranch{
        public String branch{get;set;}
    }
    
}